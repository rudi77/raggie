
// Relative Path: src\components\features\DynamicRenderer.tsx

'use client'

import React, { useEffect, useState } from 'react'
import * as Babel from '@babel/standalone'

export default function DynamicRenderer() {
  const [DynamicComponent, setDynamicComponent] = useState<React.FC | null>(null)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchAndTransform = async () => {
      try {
        console.log('Fetching code from backend...')
        const response = await fetch('/api/generated-code')
        if (!response.ok) {
          throw new Error('Failed to fetch code')
        }
        
        const data = await response.json()
        console.log('Received code:', data.code)
        
        // Transform the code using Babel with proper preset configuration
        console.log('Transforming code with Babel...')
        const transformed = Babel.transform(data.code, {
          presets: [Babel.availablePresets['react']],
          filename: 'dynamic.js',
          configFile: false,
          babelrc: false,
        }).code
        console.log('Transformed code:', transformed)

        // Create a new function to evaluate the code in the proper context
        const moduleCode = `
          const React = arguments[0];
          const exports = {};
          ${transformed}
          return exports.default;
        `
        console.log('Executing code with context...')
        const executeCode = new Function(moduleCode)

        // Execute the code with React in context
        const Component = executeCode(React)
        console.log('Component created:', Component)
        
        if (typeof Component !== 'function') {
          throw new Error('Generated code did not return a valid React component')
        }

        setDynamicComponent(() => Component)
        setError(null)
      } catch (err) {
        console.error('Error in DynamicRenderer:', err)
        setError(err instanceof Error ? err.message : 'Failed to render component')
      }
    }

    fetchAndTransform()
  }, [])

  if (error) {
    return (
      <div className="bg-[#1a2634] rounded-lg p-4">
        <div className="text-red-500">Error: {error}</div>
      </div>
    )
  }

  return (
    <div className="bg-[#1a2634] rounded-lg p-4">
      {DynamicComponent ? (
        <DynamicComponent />
      ) : (
        <div className="text-secondary">Loading component...</div>
      )}
    </div>
  )
} 



// Relative Path: src\components\features\RevenueChart.tsx

'use client'

import { useState, useEffect } from 'react'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts'

interface RevenueData {
  month: string
  revenue: number
}

const CustomTooltip = ({ active, payload, label }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-[#1a2634] p-3 rounded-lg border border-secondary/20">
        <p className="text-sm font-medium">{label}</p>
        <p className="text-primary text-lg font-bold">
          €{payload[0].value.toLocaleString('de-DE')}
        </p>
      </div>
    )
  }
  return null
}

export function RevenueChart() {
  const [data, setData] = useState<RevenueData[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('http://localhost:8000/api/revenue')
        if (!response.ok) {
          throw new Error('Failed to fetch revenue data')
        }
        const revenueData = await response.json()
        setData(revenueData)
        setError(null)
      } catch (err) {
        setError('Error loading revenue data')
        console.error('Error fetching revenue data:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  if (loading) {
    return (
      <div className="w-full h-[300px] flex items-center justify-center">
        <div className="text-secondary">Loading revenue data...</div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="w-full h-[300px] flex items-center justify-center">
        <div className="text-red-500">{error}</div>
      </div>
    )
  }

  return (
    <div className="w-full h-[300px] relative">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={data}
          margin={{ top: 10, right: 20, left: 10, bottom: 10 }}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="#808080" opacity={0.1} />
          <XAxis
            dataKey="month"
            stroke="#808080"
            tick={{ fill: '#808080' }}
            tickLine={{ stroke: '#808080' }}
          />
          <YAxis
            stroke="#808080"
            tick={{ fill: '#808080' }}
            tickLine={{ stroke: '#808080' }}
            tickFormatter={(value) => `€${value}`}
          />
          <Tooltip content={<CustomTooltip />} />
          <Line
            type="monotone"
            dataKey="revenue"
            stroke="#4285f4"
            strokeWidth={2}
            dot={{ fill: '#4285f4', r: 4 }}
            activeDot={{ r: 6, fill: '#4285f4' }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
} 



// Relative Path: src\components\features\RevenueView.tsx

'use client'

import { RevenueChart } from './RevenueChart'

export function RevenueView() {
  return (
    <div className="w-full px-4 py-4">
      <h2 className="text-2xl font-bold mb-4">Umsatzentwicklung 2024</h2>
      
      <div className="bg-[#1a2634] rounded-lg p-4">
        <RevenueChart />
      </div>

      <div className="mt-2 text-right text-secondary text-sm">
        {new Date().toLocaleTimeString('de-DE', { 
          hour: '2-digit', 
          minute: '2-digit', 
          second: '2-digit' 
        })}
      </div>
    </div>
  )
} 



// Relative Path: src\components\layout\ChatInterface.tsx

'use client'

import { Paperclip, Mic, Send } from 'lucide-react'
import { useState, useEffect } from 'react'
import * as Babel from '@babel/standalone'
import React from 'react'
import { queryText2Sql, QueryResponse } from '../../services/api'
import { useTheme } from '../../context/ThemeContext'

interface Message {
  id: string
  text: string
  timestamp: string
  isUser: boolean
  showDynamicComponent?: boolean
  sqlResponse?: QueryResponse
}

export function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [loading, setLoading] = useState(false)
  const [DynamicComponent, setDynamicComponent] = useState<React.FC | null>(null)
  const [isCollapsed, setIsCollapsed] = useState(false)
  const { theme } = useTheme()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      timestamp: new Date().toLocaleTimeString('de-DE', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      isUser: true,
    }

    setMessages(prev => [...prev, userMessage])
    setLoading(true)

    try {
      // Try to process as SQL query first
      const sqlResponse = await queryText2Sql({ question: inputValue })
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: 'Hier ist das Ergebnis deiner Anfrage:',
        timestamp: new Date().toLocaleTimeString('de-DE', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }),
        isUser: false,
        sqlResponse
      }
      setMessages(prev => [...prev, botResponse])
    } catch (err) {
      // If SQL query fails, try revenue visualization
      const isRevenueQuery =
        inputValue.toLowerCase().includes('umsatz') ||
        inputValue.toLowerCase().includes('revenue') ||
        inputValue.toLowerCase().includes('entwicklung')

      if (isRevenueQuery) {
        fetch(`http://localhost:8000/api/generated-code?query=${encodeURIComponent(inputValue)}`)
          .then(res => res.json())
          .then(({ code }) => {
            console.log('Fetched code:', code);
            const transpiled = Babel.transform(code, {
              presets: [Babel.availablePresets['react']],
              filename: 'dynamic.js',
              configFile: false,
              babelrc: false
            }).code
            console.log('Transpiled code:', transpiled);

            const moduleCode = `
              const React = arguments[0];
              const exports = {};
              ${transpiled}
              return exports.default;
            `
            try {
              const executeCode = new Function(moduleCode)
              const Component = executeCode(React)

              if (typeof Component !== 'function') {
                throw new Error('Generated code did not return a valid React component')
              }

              setDynamicComponent(() => Component)

              const botResponse: Message = {
                id: (Date.now() + 1).toString(),
                text: 'Hier ist die angeforderte Umsatzentwicklung:',
                timestamp: new Date().toLocaleTimeString('de-DE', {
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit',
                }),
                isUser: false,
                showDynamicComponent: true,
              }

              setMessages(prev => [...prev, botResponse])
            } catch (error) {
              console.error('Error executing code:', error);
              const errorResponse: Message = {
                id: (Date.now() + 1).toString(),
                text: 'Entschuldigung, ich konnte deine Anfrage nicht verarbeiten.',
                timestamp: new Date().toLocaleTimeString('de-DE', {
                  hour: '2-digit',
                  minute: '2-digit',
                  second: '2-digit',
                }),
                isUser: false,
              }
              setMessages(prev => [...prev, errorResponse])
            }
          })
          .catch(err => {
            console.error('Error fetching or transpiling code:', err)
            const errorResponse: Message = {
              id: (Date.now() + 1).toString(),
              text: 'Entschuldigung, es gab einen Fehler bei der Verarbeitung deiner Anfrage.',
              timestamp: new Date().toLocaleTimeString('de-DE', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
              }),
              isUser: false,
            }
            setMessages(prev => [...prev, errorResponse])
          })
      } else {
        const errorResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: 'Entschuldigung, ich konnte deine Anfrage nicht verarbeiten.',
          timestamp: new Date().toLocaleTimeString('de-DE', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          }),
          isUser: false,
        }
        setMessages(prev => [...prev, errorResponse])
      }
    } finally {
      setLoading(false)
      setInputValue('')
    }
  }

  const renderSqlResponse = (response: QueryResponse) => {
    if (!response || !response.result) return null;

    return (
      <div className="space-y-4">
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-light-text dark:text-dark-text">Generated SQL:</h4>
          <pre className="p-3 bg-light-background dark:bg-dark-background rounded-md text-light-text dark:text-dark-text text-sm overflow-x-auto">
            <code>{response.sql}</code>
          </pre>
        </div>

        <div className="space-y-2">
          <h4 className="text-sm font-medium text-light-text dark:text-dark-text">Results:</h4>
          {Array.isArray(response.result) && response.result.length > 0 && typeof response.result[0] === 'object' ? (
            <div className="overflow-x-auto rounded-lg border border-light-border dark:border-dark-border">
              <table className="w-full text-left border-collapse">
                <thead>
                  <tr className="border-b border-light-border dark:border-dark-border bg-light-background-lighter dark:bg-dark-background-lighter">
                    {Object.keys(response.result[0]).map(header => (
                      <th key={header} className="px-4 py-3 text-sm font-medium text-light-text dark:text-dark-text uppercase tracking-wider">
                        {header}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="divide-y divide-light-border dark:divide-dark-border">
                  {response.result.map((row, rowIndex) => (
                    <tr 
                      key={rowIndex}
                      className="bg-light-background-light dark:bg-dark-background-light hover:bg-light-background-lighter dark:hover:bg-dark-background-lighter transition-colors duration-150 ease-in-out"
                    >
                      {Object.values(row).map((value, valueIndex) => (
                        <td key={valueIndex} className="px-4 py-3 text-sm text-light-text dark:text-dark-text whitespace-nowrap">
                          {value !== null && value !== undefined ? String(value) : '-'}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <pre className="p-3 bg-light-background dark:bg-dark-background rounded-md text-light-text dark:text-dark-text text-sm overflow-x-auto">
              {response.formatted_result}
            </pre>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className={`fixed left-0 top-16 bottom-0 flex transition-all duration-300 ease-in-out ${isCollapsed ? 'w-12' : 'w-[600px]'}`}>
      {/* Main Chat Container */}
      <div className={`flex flex-col flex-1 bg-light-background dark:bg-dark-background ${isCollapsed ? 'hidden' : ''}`}>
        <div className="flex-1 overflow-y-auto">
          <div className="w-full min-h-full py-6 px-4">
            {messages.map(message => (
              <div key={message.id} className="mb-4">
                {message.isUser ? (
                  <div className="flex justify-end">
                    <div className="max-w-[400px]">
                      <div className="bg-light-primary dark:bg-dark-primary text-white px-4 py-2 rounded-xl">
                        {message.text}
                      </div>
                      <div className="text-sm text-light-primary dark:text-dark-primary mt-1 text-right">
                        {message.timestamp}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col space-y-2">
                    <div className="flex items-center space-x-3">
                      <div className="w-8 h-8 rounded-full bg-light-primary dark:bg-dark-primary text-white flex items-center justify-center">
                        A
                      </div>
                      <span className="text-light-text-secondary dark:text-dark-text-secondary">Assistant</span>
                    </div>
                    <div className="bg-light-background-light dark:bg-dark-background-light rounded-xl p-6 space-y-4">
                      <div className="text-light-text dark:text-dark-text">{message.text}</div>
                      {message.sqlResponse && (
                        <div className="space-y-4">
                          <div className="space-y-2">
                            <h4 className="text-sm font-medium text-light-text dark:text-dark-text">Generated SQL:</h4>
                            <pre className="p-3 bg-light-background dark:bg-dark-background rounded-md text-light-text dark:text-dark-text text-sm overflow-x-auto">
                              <code>{message.sqlResponse.sql}</code>
                            </pre>
                          </div>
                          <div className="space-y-2">
                            <h4 className="text-sm font-medium text-light-text dark:text-dark-text">Results:</h4>
                            {Array.isArray(message.sqlResponse.result) && message.sqlResponse.result.length > 0 && typeof message.sqlResponse.result[0] === 'object' ? (
                              <div className="overflow-x-auto rounded-lg border border-light-border dark:border-dark-border">
                                <table className="w-full text-left border-collapse">
                                  <thead>
                                    <tr className="border-b border-light-border dark:border-dark-border bg-light-background-lighter dark:bg-dark-background-lighter">
                                      {Object.keys(message.sqlResponse.result[0]).map(header => (
                                        <th key={header} className="px-4 py-3 text-sm font-medium text-light-text dark:text-dark-text uppercase tracking-wider">
                                          {header}
                                        </th>
                                      ))}
                                    </tr>
                                  </thead>
                                  <tbody className="divide-y divide-light-border dark:divide-dark-border">
                                    {message.sqlResponse.result.map((row, rowIndex) => (
                                      <tr 
                                        key={rowIndex}
                                        className="bg-light-background-light dark:bg-dark-background-light hover:bg-light-background-lighter dark:hover:bg-dark-background-lighter transition-colors duration-150 ease-in-out"
                                      >
                                        {Object.values(row).map((value, valueIndex) => (
                                          <td key={valueIndex} className="px-4 py-3 text-sm text-light-text dark:text-dark-text whitespace-nowrap">
                                            {value !== null && value !== undefined ? String(value) : '-'}
                                          </td>
                                        ))}
                                      </tr>
                                    ))}
                                  </tbody>
                                </table>
                              </div>
                            ) : (
                              <pre className="p-3 bg-light-background dark:bg-dark-background rounded-md text-light-text dark:text-dark-text text-sm overflow-x-auto">
                                {message.sqlResponse.formatted_result}
                              </pre>
                            )}
                          </div>
                        </div>
                      )}
                      {message.showDynamicComponent && DynamicComponent && <DynamicComponent />}
                      <div className="text-sm text-light-primary dark:text-dark-primary text-right">
                        {message.timestamp}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="border-t border-light-border dark:border-dark-border bg-light-background dark:bg-dark-background py-4 px-4">
          <form onSubmit={handleSubmit} className="relative">
            <input
              type="text"
              value={inputValue}
              onChange={e => setInputValue(e.target.value)}
              placeholder="Stelle eine Frage oder frage nach Daten..."
              className="w-full bg-light-background-light dark:bg-dark-background-light rounded-full pl-12 pr-32 py-4 text-light-text dark:text-dark-text placeholder-light-text-secondary dark:placeholder-dark-text-secondary focus:outline-none focus:ring-1 focus:ring-light-primary dark:focus:ring-dark-primary border border-light-border dark:border-dark-border"
              disabled={loading}
            />
            <div className="absolute left-4 top-1/2 -translate-y-1/2 flex items-center space-x-2">
              <button type="button" className="text-light-text-secondary dark:text-dark-text-secondary hover:text-light-text dark:hover:text-dark-text transition-colors">
                <Paperclip className="w-5 h-5" />
              </button>
            </div>
            <div className="absolute right-4 top-1/2 -translate-y-1/2 flex items-center space-x-4">
              <button type="button" className="text-light-text-secondary dark:text-dark-text-secondary hover:text-light-text dark:hover:text-dark-text transition-colors">
                <Mic className="w-5 h-5" />
              </button>
              <button 
                type="submit" 
                className="text-light-primary dark:text-dark-primary hover:text-light-primary/90 dark:hover:text-dark-primary/90 transition-colors"
                disabled={loading}
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </form>
          <div className="text-xs text-light-text-secondary dark:text-dark-text-secondary mt-2 text-center">
            Press Enter to send, Shift + Enter for new line
          </div>
        </div>
      </div>

      {/* Toggle Button */}
      <button
        onClick={() => setIsCollapsed(!isCollapsed)}
        className="w-12 flex items-center justify-center bg-light-background-light dark:bg-dark-background-light border-l border-light-border dark:border-dark-border hover:bg-light-background-lighter dark:hover:bg-dark-background-lighter transition-colors"
      >
        <span className="text-light-text-secondary dark:text-dark-text-secondary text-lg font-medium">
          {isCollapsed ? '→' : '←'}
        </span>
      </button>
    </div>
  )
} 



// Relative Path: src\components\layout\Header.tsx

'use client'

import { Sun, Moon } from 'lucide-react'
import { useTheme } from '../../context/ThemeContext'

export function Header() {
  const { theme, toggleTheme } = useTheme()
  
  const currentTime = new Date().toLocaleTimeString('de-DE', {
    hour: '2-digit',
    minute: '2-digit'
  })

  return (
    <header className="fixed top-0 left-0 right-0 h-16 bg-light-background-light dark:bg-dark-background border-b border-light-border dark:border-dark-border z-50">
      <div className="max-w-7xl mx-auto px-6 h-full flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <h1 className="text-light-primary dark:text-dark-primary text-xl font-medium">iGecko</h1>
          <span className="text-light-text-secondary dark:text-dark-text-secondary font-bold font-large">| CXO-Dashboard</span>
        </div>
        
        <div className="flex items-center space-x-4">
          <span className="text-light-primary dark:text-dark-primary text-sm">{currentTime}</span>
          <button
            onClick={toggleTheme}
            className="w-8 h-8 flex items-center justify-center rounded-full hover:bg-light-background-lighter dark:hover:bg-dark-background-lighter transition-colors"
            aria-label="Toggle theme"
          >
            {theme === 'dark' ? (
              <Sun className="w-4 h-4 text-light-text-secondary dark:text-dark-text-secondary" />
            ) : (
              <Moon className="w-4 h-4 text-light-text-secondary dark:text-dark-text-secondary" />
            )}
          </button>
          <div className="px-3 py-1 bg-light-primary/20 dark:bg-dark-primary/20 text-light-primary dark:text-dark-primary text-sm rounded-md">
            Version 1.0
          </div>
        </div>
      </div>
    </header>
  )
} 



// Relative Path: src\components\Text2SqlQuery.tsx

import { useState } from 'react';
import { queryText2Sql, QueryResponse } from '../services/api';

export function Text2SqlQuery() {
  const [question, setQuestion] = useState('');
  const [response, setResponse] = useState<QueryResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!question.trim()) return;

    setLoading(true);
    setError(null);

    try {
      const data = await queryText2Sql({ question });
      setResponse(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  // Function to render the result as a table if it's an array of objects
  const renderResultTable = () => {
    if (!response || !response.result) return null;

    // Check if result is an array of objects
    if (Array.isArray(response.result) && response.result.length > 0 && typeof response.result[0] === 'object') {
      const headers = Object.keys(response.result[0]);

      return (
        <div className="overflow-x-auto mt-4">
          <table className="w-full text-left border-collapse">
            <thead>
              <tr className="bg-gray-700 text-gray-200">
                {headers.map((header) => (
                  <th key={header} className="px-4 py-2 border border-gray-600">
                    {header}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {response.result.map((row, rowIndex) => (
                <tr key={rowIndex} className="bg-gray-800 text-gray-300">
                  {headers.map((header) => (
                    <td key={`${rowIndex}-${header}`} className="px-4 py-2 border border-gray-600">
                      {row[header] !== null && row[header] !== undefined ? String(row[header]) : ''}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      );
    }

    // If not an array of objects, just display the formatted result
    return (
      <div className="mt-4 p-4 bg-gray-800 rounded-md text-gray-300">
        <pre className="whitespace-pre-wrap">{response.formatted_result}</pre>
      </div>
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-6 text-white">SQL Query Assistant</h2>
      
      <form onSubmit={handleSubmit} className="mb-6">
        <div className="flex flex-col space-y-4">
          <div>
            <label htmlFor="question" className="block text-sm font-medium text-gray-300 mb-2">
              Ask your question
            </label>
            <textarea
              id="question"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="e.g., Show me the total sales by product category"
            />
          </div>
          
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
          >
            {loading ? 'Processing...' : 'Submit Query'}
          </button>
        </div>
      </form>

      {error && (
        <div className="p-4 mb-4 bg-red-900 text-red-200 rounded-md">
          <p className="font-medium">Error:</p>
          <p>{error}</p>
        </div>
      )}

      {response && (
        <div className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-medium text-white mb-2">Generated SQL:</h3>
            <pre className="p-4 bg-gray-800 rounded-md text-gray-300 overflow-x-auto">
              <code>{response.sql}</code>
            </pre>
          </div>

          <div>
            <h3 className="text-lg font-medium text-white mb-2">Results:</h3>
            {renderResultTable()}
          </div>
        </div>
      )}
    </div>
  );
} 



// Relative Path: src\context\ThemeContext.tsx

'use client'

import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'dark' | 'light'

interface ThemeContextType {
  theme: Theme
  toggleTheme: () => void
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('dark')

  useEffect(() => {
    // Check for saved theme preference or system preference
    const savedTheme = localStorage.getItem('theme') as Theme
    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    const initialTheme = savedTheme || systemTheme
    
    setTheme(initialTheme)
    document.documentElement.classList.toggle('dark', initialTheme === 'dark')
  }, [])

  const toggleTheme = () => {
    const newTheme = theme === 'dark' ? 'light' : 'dark'
    setTheme(newTheme)
    localStorage.setItem('theme', newTheme)
    document.documentElement.classList.toggle('dark', newTheme === 'dark')
  }

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
} 



// Relative Path: src\services\api.ts

// API service for handling backend requests

const API_BASE_URL = 'http://localhost:9000';

export interface QueryResponse {
  sql: string;
  result: any;
  formatted_result: string;
}

export interface QueryRequest {
  question: string;
}

/**
 * Sends a question to the text2sql API and returns the response
 */
export async function queryText2Sql(request: QueryRequest): Promise<QueryResponse> {
  const response = await fetch(`${API_BASE_URL}/text2sql/query`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(request),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || 'Failed to process query');
  }

  return response.json();
}

/**
 * Gets an explanation of the SQL that would be generated for a question
 */
export async function explainText2Sql(request: QueryRequest): Promise<{ sql: string }> {
  const response = await fetch(`${API_BASE_URL}/text2sql/explain`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(request),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || 'Failed to explain query');
  }

  return response.json();
} 



// Relative Path: src\types\babel__standalone.d.ts

declare module '@babel/standalone' {
  export interface TransformResult {
    code: string;
    map: any;
    ast: any;
  }

  export interface TransformOptions {
    filename?: string;
    presets?: string[];
    plugins?: string[];
    configFile?: boolean;
    babelrc?: boolean;
  }

  export function transform(code: string, options?: TransformOptions): TransformResult;
  
  export const availablePresets: {
    [key: string]: any;
  };
} 



// Relative Path: src\types\lucide-react.d.ts

declare module 'lucide-react' {
  import * as React from 'react';

  export interface IconProps extends React.SVGProps<SVGSVGElement> {
    size?: number | string;
    color?: string;
    strokeWidth?: number | string;
  }

  export const Sun: React.FC<IconProps>;
  export const Moon: React.FC<IconProps>;
  export const Paperclip: React.FC<IconProps>;
  export const Mic: React.FC<IconProps>;
  export const Send: React.FC<IconProps>;
} 



// Relative Path: src\types\recharts.d.ts

declare module 'recharts' {
  import * as React from 'react';

  export interface ResponsiveContainerProps {
    width?: number | string;
    height?: number | string;
    aspect?: number;
    minHeight?: number;
    children: React.ReactNode;
  }

  export interface LineChartProps {
    data?: any[];
    margin?: {
      top?: number;
      right?: number;
      bottom?: number;
      left?: number;
    };
    children: React.ReactNode;
  }

  export interface LineProps {
    type?: 'monotone' | 'linear' | 'step' | 'stepBefore' | 'stepAfter';
    dataKey: string;
    stroke?: string;
    strokeWidth?: number;
    dot?: any;
    activeDot?: any;
  }

  export interface XAxisProps {
    dataKey?: string;
    stroke?: string;
    tick?: any;
    tickLine?: any;
  }

  export interface YAxisProps {
    stroke?: string;
    tick?: any;
    tickLine?: any;
    tickFormatter?: (value: any) => string;
  }

  export interface CartesianGridProps {
    strokeDasharray?: string;
    stroke?: string;
    opacity?: number;
  }

  export interface TooltipProps {
    content?: React.ComponentType<any>;
  }

  export const ResponsiveContainer: React.FC<ResponsiveContainerProps>;
  export const LineChart: React.FC<LineChartProps>;
  export const Line: React.FC<LineProps>;
  export const XAxis: React.FC<XAxisProps>;
  export const YAxis: React.FC<YAxisProps>;
  export const CartesianGrid: React.FC<CartesianGridProps>;
  export const Tooltip: React.FC<TooltipProps>;
} 



// Relative Path: src\App.tsx

import { ThemeProvider } from './context/ThemeContext'
import { Header } from './components/layout/Header'
import { ChatInterface } from './components/layout/ChatInterface'

export default function App() {
  return (
    <ThemeProvider>
      <div className="flex flex-col min-h-screen bg-light-background dark:bg-dark-background">
        <Header />
        <main className="flex-1 pt-header">
          <ChatInterface />
        </main>
      </div>
    </ThemeProvider>
  )
} 



// Relative Path: src\main.tsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
) 



// Relative Path: vite.config.ts

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:9000',
        changeOrigin: true,
      },
    },
  },
}) 



