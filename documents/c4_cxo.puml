@startuml CxO_Dashboard_Phase2_Revised
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

Person(cxo, "Führungskraft / CxO", "Formuliert Anforderungen und erhält Insights")

Boundary(sys, "CxO Dashboard") {
  Container(chat, "Chat-UI & Dashboard", "React", "Interaktives Cockpit & Chat-Interface")
  
  Container(manager_agent, "Manager Agent", "Python", "Entscheidet über Aktionen:\n- Direkte Anfragen\n- Workflow-Erstellung\n- Workflow-Trigger")
  
  Container(workflow_service, "Workflow Service", "Python", "Verwaltet persistente Workflows:\n- Speichert Definitionen\n- Startet CronJobs\n- Managed Background Tasks")
  
  Container(streaming_engine, "Streaming Engine", "Python", "Führt wiederkehrende Workflows aus:\n- Orchestriert Agenten-Ketten\n- Pusht Updates via WebSocket")
  
  Container(text2sql_agent, "Text2SQL Agent", "Python", "Natürliche Sprache → SQL")
  Container(rag_agent, "RAG Agent", "Python", "Dokumentenanalyse")
  Container(code_agent, "Code Agent", "Python", "Generiert Visualisierungen")
  
  ContainerDb(eg_db, "eGecko DB", "SQL", "Finanzdaten")
  ContainerDb(rag_db, "RAG Memory", "VectorDB", "iMacros & Dokumente")
  ContainerDb(workflow_db, "Workflow Registry", "PostgreSQL", "Workflow-Definitionen & Runs")
  
  Container(ws_service, "WebSocket Service", "Python", "Echtzeit-Updates an Frontend")
  Container(sec, "Security Service", "Python", "RBAC & Audit-Logging")
}

System_Ext(llm, "LLM API", "OpenAI/GPT")

' Kernbeziehungen
Rel(cxo, chat, "Nutzt Dashboard", "HTTPS")
Rel(chat, manager_agent, "Sendet Anfragen", "REST/WebSocket")

' Manager Agent als Dispatcher
Rel(manager_agent, text2sql_agent, "Delegiert SQL-Anfragen")
Rel(manager_agent, rag_agent, "Delegiert Dokumentenanalysen")
Rel(manager_agent, code_agent, "Delegiert Code-Generierung")
Rel(manager_agent, workflow_service, "Trigger für persistente Workflows", "REST")

' Workflow-Service-Logik
Rel(workflow_service, workflow_db, "Persistiert Workflows")
Rel(workflow_service, streaming_engine, "Startet Background-Tasks", "Async")

' Streaming-Execution
Rel(streaming_engine, text2sql_agent, "Nutzt für wiederkehrende SQL")
Rel(streaming_engine, rag_agent, "Nutzt für periodische Doc-Analysen")
Rel(streaming_engine, code_agent, "Nutzt für automatische Reports")
Rel(streaming_engine, ws_service, "Pusht Ergebnisse", "Async")

' Datenzugriffe
Rel(text2sql_agent, eg_db, "Liest/Schreibt", "SQL")
Rel(rag_agent, rag_db, "Vektorisiert/Sucht", "gRPC")
Rel(ws_service, chat, "Live-Updates", "WebSocket")

' Sicherheit
Rel(manager_agent, sec, "Validiert Anfragen")
Rel(streaming_engine, sec, "Protokolliert Runs")

' LLM-Integration
Rel(manager_agent, llm, "Nutzt für Planung")
Rel(code_agent, llm, "Nutzt für Code-Gen")

@enduml