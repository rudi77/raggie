
// Relative Path: \app\layout.tsx

import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { ThemeProvider } from '@/context/ThemeContext'
import { Header } from '@/components/layout/Header'
import { ChatInterface } from '@/components/layout/ChatInterface'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'iGecko Financial Analytics Dashboard',
  description: 'Ihr KI-Buchhaltungsassistent',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="de" suppressHydrationWarning>
      <body className={`${inter.className} bg-background text-text`}>
        <ThemeProvider>
          <Header />
          <ChatInterface />
        </ThemeProvider>
      </body>
    </html>
  )
} 



// Relative Path: \app\page.tsx

'use client'

import DynamicRenderer from '@/components/features/DynamicRenderer'

export default function Home() {
  return (
    <div className="max-w-3xl mx-auto w-full px-4 py-6">
      <h1 className="text-2xl font-bold mb-6">Dynamic Component Example</h1>
      <DynamicRenderer />
    </div>
  )
}




// Relative Path: \components\features\DynamicRenderer.tsx

'use client'

import React, { useEffect, useState } from 'react'
import * as Babel from '@babel/standalone'

export default function DynamicRenderer() {
  const [DynamicComponent, setDynamicComponent] = useState<React.FC | null>(null)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchAndTransform = async () => {
      try {
        console.log('Fetching code from backend...')
        const response = await fetch('/api/generated-code')
        if (!response.ok) {
          throw new Error('Failed to fetch code')
        }
        
        const data = await response.json()
        console.log('Received code:', data.code)
        
        // Transform the code using Babel with proper preset configuration
        console.log('Transforming code with Babel...')
        const transformed = Babel.transform(data.code, {
          presets: [Babel.availablePresets['react']],
          filename: 'dynamic.js',
          configFile: false,
          babelrc: false,
        }).code
        console.log('Transformed code:', transformed)

        // Create a new function to evaluate the code in the proper context
        const moduleCode = `
          const React = arguments[0];
          const exports = {};
          ${transformed}
          return exports.default;
        `
        console.log('Executing code with context...')
        const executeCode = new Function(moduleCode)

        // Execute the code with React in context
        const Component = executeCode(React)
        console.log('Component created:', Component)
        
        if (typeof Component !== 'function') {
          throw new Error('Generated code did not return a valid React component')
        }

        setDynamicComponent(() => Component)
        setError(null)
      } catch (err) {
        console.error('Error in DynamicRenderer:', err)
        setError(err instanceof Error ? err.message : 'Failed to render component')
      }
    }

    fetchAndTransform()
  }, [])

  if (error) {
    return (
      <div className="bg-[#1a2634] rounded-lg p-6">
        <div className="text-red-500">Error: {error}</div>
      </div>
    )
  }

  return (
    <div className="bg-[#1a2634] rounded-lg p-6">
      {DynamicComponent ? (
        <DynamicComponent />
      ) : (
        <div className="text-secondary">Loading component...</div>
      )}
    </div>
  )
}




// Relative Path: \components\features\RevenueChart.tsx

'use client'

import { useState, useEffect } from 'react'
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts'

interface RevenueData {
  month: string
  revenue: number
}

const CustomTooltip = ({ active, payload, label }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-[#1a2634] p-3 rounded-lg border border-secondary/20">
        <p className="text-sm font-medium">{label}</p>
        <p className="text-primary text-lg font-bold">
          €{payload[0].value.toLocaleString('de-DE')}
        </p>
      </div>
    )
  }
  return null
}

export function RevenueChart() {
  const [data, setData] = useState<RevenueData[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('http://localhost:8000/api/revenue')
        if (!response.ok) {
          throw new Error('Failed to fetch revenue data')
        }
        const revenueData = await response.json()
        setData(revenueData)
        setError(null)
      } catch (err) {
        setError('Error loading revenue data')
        console.error('Error fetching revenue data:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  if (loading) {
    return (
      <div className="w-full h-[400px] flex items-center justify-center">
        <div className="text-secondary">Loading revenue data...</div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="w-full h-[400px] flex items-center justify-center">
        <div className="text-red-500">{error}</div>
      </div>
    )
  }

  return (
    <div className="w-full h-[400px] relative">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={data}
          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="#808080" opacity={0.1} />
          <XAxis
            dataKey="month"
            stroke="#808080"
            tick={{ fill: '#808080' }}
            tickLine={{ stroke: '#808080' }}
          />
          <YAxis
            stroke="#808080"
            tick={{ fill: '#808080' }}
            tickLine={{ stroke: '#808080' }}
            tickFormatter={(value) => `€${value}`}
          />
          <Tooltip content={<CustomTooltip />} />
          <Line
            type="monotone"
            dataKey="revenue"
            stroke="#4285f4"
            strokeWidth={2}
            dot={{ fill: '#4285f4', r: 4 }}
            activeDot={{ r: 6, fill: '#4285f4' }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
} 



// Relative Path: \components\features\RevenueView.tsx

'use client'

import { RevenueChart } from './RevenueChart'

export function RevenueView() {
  return (
    <div className="max-w-3xl mx-auto w-full px-4 py-6">
      <h2 className="text-2xl font-bold mb-6">Umsatzentwicklung 2024</h2>
      
      <div className="bg-[#1a2634] rounded-lg p-6">
        <RevenueChart />
      </div>

      <div className="mt-4 text-right text-secondary text-sm">
        {new Date().toLocaleTimeString('de-DE', { 
          hour: '2-digit', 
          minute: '2-digit', 
          second: '2-digit' 
        })}
      </div>
    </div>
  )
} 



// Relative Path: \components\layout\ChatInterface.tsx

'use client'

import { Paperclip, Mic, Send } from 'lucide-react'
import { useState, useEffect } from 'react'
import * as Babel from '@babel/standalone'
import React from 'react'

interface Message {
  id: string
  text: string
  timestamp: string
  isUser: boolean
  showDynamicComponent?: boolean
}

export function ChatInterface() {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [DynamicComponent, setDynamicComponent] = useState<React.FC | null>(null)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      timestamp: new Date().toLocaleTimeString('de-DE', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      }),
      isUser: true,
    }

    setMessages(prev => [...prev, userMessage])

    const isRevenueQuery =
      inputValue.toLowerCase().includes('umsatz') ||
      inputValue.toLowerCase().includes('revenue') ||
      inputValue.toLowerCase().includes('entwicklung')

    if (isRevenueQuery) {
      fetch(`http://localhost:8000/api/generated-code?query=${encodeURIComponent(inputValue)}`)
        .then(res => res.json())
        .then(({ code }) => {
          console.log('Fetched code:', code);
          const transpiled = Babel.transform(code, {
            presets: [Babel.availablePresets['react']],
            filename: 'dynamic.js',
            configFile: false,
            babelrc: false
          }).code
          console.log('Transpiled code:', transpiled);

          // Create a new function to evaluate the code in the proper context
          const moduleCode = `
            const React = arguments[0];
            const exports = {};
            ${transpiled}
            return exports.default;
          `
          try {
            const executeCode = new Function(moduleCode)
            const Component = executeCode(React)

            if (typeof Component !== 'function') {
              throw new Error('Generated code did not return a valid React component')
            }

            setDynamicComponent(() => Component)

            const botResponse: Message = {
              id: (Date.now() + 1).toString(),
              text: 'Hier ist die angeforderte Umsatzentwicklung:',
              timestamp: new Date().toLocaleTimeString('de-DE', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
              }),
              isUser: false,
              showDynamicComponent: true,
            }

            setMessages(prev => [...prev, botResponse])
          } catch (error) {
            console.error('Error executing code:', error);
          }
        })
        .catch(err => {
          console.error('Error fetching or transpiling code:', err)
        })
    }

    setInputValue('')
  }

  return (
    <div className="min-h-screen flex flex-col pt-header">
      <div className="flex-1 max-w-3xl mx-auto w-full px-4 py-6 space-y-6">
        {messages.map(message => (
          <div key={message.id}>
            <div className={`flex ${message.isUser ? 'justify-end' : 'justify-start'} items-start`}>
              {!message.isUser && (
                <div className="w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center mr-2 flex-shrink-0 mt-1">
                  A
                </div>
              )}
              <div
                className={`max-w-[80%] rounded-lg p-3 ${
                  message.isUser ? 'bg-primary text-white' : 'bg-[#1a2634] text-text'
                }`}
              >
                <p className="whitespace-pre-line">{message.text}</p>
                <span className="text-xs opacity-70 mt-1 block">{message.timestamp}</span>
              </div>
            </div>
            {message.showDynamicComponent && DynamicComponent && (
              <div className="mt-4 bg-[#1a2634] p-4 rounded-lg">
                <DynamicComponent />
              </div>
            )}
          </div>
        ))}
      </div>

      <div className="border-t border-secondary/30 bg-background">
        <div className="max-w-4xl mx-auto px-4 py-4">
          <form onSubmit={handleSubmit} className="relative">
            <input
              type="text"
              value={inputValue}
              onChange={e => setInputValue(e.target.value)}
              placeholder="Type your instructions..."
              className="w-full bg-[#1a2634] rounded-lg pl-12 pr-32 py-3 text-text placeholder-secondary focus:outline-none"
            />
            <div className="absolute left-2 top-1/2 -translate-y-1/2 flex items-center space-x-2">
              <button type="button" className="p-2 hover:bg-secondary/10 rounded-full transition-colors">
                <Paperclip className="w-5 h-5 text-text" />
              </button>
            </div>
            <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-2">
              <button type="button" className="p-2 hover:bg-secondary/10 rounded-full transition-colors">
                <Mic className="w-5 h-5 text-text" />
              </button>
              <button type="submit" className="p-2 hover:bg-primary/90 rounded-full transition-colors">
                <Send className="w-5 h-5 text-text" />
              </button>
            </div>
          </form>
          <div className="text-xs text-secondary mt-2 text-center">
            Press Enter to send, Shift + Enter for new line
          </div>
        </div>
      </div>
    </div>
  )
}




// Relative Path: \components\layout\Header.tsx

'use client'

import { Sun, Moon } from 'lucide-react'
import { useTheme } from '@/context/ThemeContext'

export function Header() {
  const { theme, toggleTheme } = useTheme()

  return (
    <header className="fixed top-0 left-0 right-0 h-header bg-background border-b border-secondary/20 z-50">
      <div className="max-w-3xl mx-auto px-4 h-full flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <h1 className="text-2xl font-bold text-primary">iGecko</h1>
          <span className="text-sm text-secondary">| Ihr KI-Buchhaltungsassistent</span>
        </div>
        
        <button
          onClick={toggleTheme}
          className="p-2 rounded-full hover:bg-secondary/10 transition-colors"
          aria-label="Toggle theme"
        >
          {theme === 'dark' ? (
            <Sun className="w-5 h-5 text-text" />
          ) : (
            <Moon className="w-5 h-5 text-text" />
          )}
        </button>
      </div>
    </header>
  )
} 



// Relative Path: \context\ThemeContext.tsx

'use client'

import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'dark' | 'light'

interface ThemeContextType {
  theme: Theme
  toggleTheme: () => void
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('dark')

  useEffect(() => {
    // Check for saved theme preference or system preference
    const savedTheme = localStorage.getItem('theme') as Theme
    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    const initialTheme = savedTheme || systemTheme
    
    setTheme(initialTheme)
    document.documentElement.classList.toggle('dark', initialTheme === 'dark')
  }, [])

  const toggleTheme = () => {
    const newTheme = theme === 'dark' ? 'light' : 'dark'
    setTheme(newTheme)
    localStorage.setItem('theme', newTheme)
    document.documentElement.classList.toggle('dark', newTheme === 'dark')
  }

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
} 



